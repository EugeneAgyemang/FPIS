// <auto-generated />
using System;
using FPIS.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FPIS.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230508230847_RemoveLocationAndLotFieldsFromMaterialProcurementModel")]
    partial class RemoveLocationAndLotFieldsFromMaterialProcurementModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FPIS.Models.AnalysisItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AnalysisItems");
                });

            modelBuilder.Entity("FPIS.Models.AnalysisParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AnalysisParameters");
                });

            modelBuilder.Entity("FPIS.Models.AnalysisProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnalysisItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisItemId");

                    b.HasIndex("ProductId");

                    b.ToTable("AnalysisProducts");
                });

            modelBuilder.Entity("FPIS.Models.AnalysisRemark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AnalysisItem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SampleDetailId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SampleResultDetailId")
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SampleDetailId");

                    b.HasIndex("SampleResultDetailId");

                    b.HasIndex("UserId");

                    b.ToTable("AnalysisRemarks");
                });

            modelBuilder.Entity("FPIS.Models.AnalysisWater", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnalysisItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisItemId");

                    b.HasIndex("WaterId");

                    b.ToTable("AnalysisWaters");
                });

            modelBuilder.Entity("FPIS.Models.CalculatorVariable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.Property<string>("VariableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CalculatorVariables");
                });

            modelBuilder.Entity("FPIS.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("FPIS.Models.Designation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("DesignationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Designations");
                });

            modelBuilder.Entity("FPIS.Models.FinishedProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Consignee")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContainerNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SampleResultId")
                        .HasColumnType("uuid");

                    b.Property<string>("SealNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SampleResultId");

                    b.ToTable("FinishedProducts");
                });

            modelBuilder.Entity("FPIS.Models.IssuedStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("IssuedDate")
                        .HasColumnType("date");

                    b.Property<int>("QuantityIssued")
                        .HasColumnType("integer");

                    b.Property<Guid>("StockItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StockItemId");

                    b.HasIndex("UserId");

                    b.ToTable("IssuedStocks");
                });

            modelBuilder.Entity("FPIS.Models.MaterialAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MaterialAttributes");
                });

            modelBuilder.Entity("FPIS.Models.MaterialProcurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("MaterialProcurements");
                });

            modelBuilder.Entity("FPIS.Models.ProcurementAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialAttributeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProcurementId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MaterialAttributeId");

                    b.HasIndex("ProcurementId");

                    b.ToTable("ProcurementAttributes");
                });

            modelBuilder.Entity("FPIS.Models.ProcurementParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProcurementId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductParameterId")
                        .HasColumnType("uuid");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ProcurementId");

                    b.HasIndex("ProductParameterId");

                    b.ToTable("ProcurementParameters");
                });

            modelBuilder.Entity("FPIS.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("FPIS.Models.ProductAnalysisParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnalysisParameterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductParameterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisParameterId");

                    b.HasIndex("ProductParameterId");

                    b.ToTable("ProductAnalysisParameters");
                });

            modelBuilder.Entity("FPIS.Models.ProductParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<float>("Specification")
                        .HasColumnType("real");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductParameters");
                });

            modelBuilder.Entity("FPIS.Models.ProductionDailyReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("ProductionRemark")
                        .HasColumnType("text");

                    b.Property<TimeOnly>("TimeIn")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("TimeOut")
                        .HasColumnType("time without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ProductionDailyReports");
                });

            modelBuilder.Entity("FPIS.Models.ReceivedStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("ReceivedDate")
                        .HasColumnType("date");

                    b.Property<Guid>("StockItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StockItemId");

                    b.HasIndex("UserId");

                    b.ToTable("ReceivedStocks");
                });

            modelBuilder.Entity("FPIS.Models.Receiving", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GrossWeight")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MaterialProcurementId")
                        .HasColumnType("uuid");

                    b.Property<string>("NetWeight")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TruckNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Units")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MaterialProcurementId");

                    b.ToTable("Receivings");
                });

            modelBuilder.Entity("FPIS.Models.Releasing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialProcurementId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReceivingId")
                        .HasColumnType("uuid");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MaterialProcurementId");

                    b.HasIndex("ReceivingId");

                    b.ToTable("Releasings");
                });

            modelBuilder.Entity("FPIS.Models.Sample", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Employee1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Employee2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.Property<string>("TypeForFiltering")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("FPIS.Models.SampleDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnalysisItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SampleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisItemId");

                    b.HasIndex("SampleId");

                    b.ToTable("SampleDetails");
                });

            modelBuilder.Entity("FPIS.Models.SampleResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("IsRetest")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SampleId")
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SampleId");

                    b.HasIndex("UserId");

                    b.ToTable("SampleResults");
                });

            modelBuilder.Entity("FPIS.Models.SampleResultDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnalysisItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SampleResultId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisItemId");

                    b.HasIndex("SampleResultId");

                    b.ToTable("SampleResultDetails");
                });

            modelBuilder.Entity("FPIS.Models.SampleResultsDetailsWithParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnalysisParameterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SampleResultDetailId")
                        .HasColumnType("uuid");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisParameterId");

                    b.HasIndex("SampleResultDetailId");

                    b.ToTable("SampleResultsDetailsWithParameters");
                });

            modelBuilder.Entity("FPIS.Models.StockItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("StockItemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StockItemType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StockItems");
                });

            modelBuilder.Entity("FPIS.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DesignationId")
                        .HasColumnType("uuid");

                    b.Property<string>("EmpID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DesignationId");

                    b.HasIndex("EmpID")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FPIS.Models.Water", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("WaterName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Waters");
                });

            modelBuilder.Entity("FPIS.Models.WaterAnalysisParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnalysisParameterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaterParameterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisParameterId");

                    b.HasIndex("WaterParameterId");

                    b.ToTable("WaterAnalysisParameters");
                });

            modelBuilder.Entity("FPIS.Models.WaterParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("ControlLimit")
                        .HasColumnType("real");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WaterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WaterId");

                    b.ToTable("WaterParameters");
                });

            modelBuilder.Entity("FPIS.Models.AnalysisProduct", b =>
                {
                    b.HasOne("FPIS.Models.AnalysisItem", "AnalysisItem")
                        .WithMany("AnalysisProducts")
                        .HasForeignKey("AnalysisItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPIS.Models.Product", "Product")
                        .WithMany("AnalysisProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalysisItem");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FPIS.Models.AnalysisRemark", b =>
                {
                    b.HasOne("FPIS.Models.SampleDetail", "SampleDetail")
                        .WithMany("AnalysisRemarks")
                        .HasForeignKey("SampleDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPIS.Models.SampleResultDetail", "SampleResultDetail")
                        .WithMany("AnalysisRemarks")
                        .HasForeignKey("SampleResultDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPIS.Models.User", "User")
                        .WithMany("AnalysisRemarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SampleDetail");

                    b.Navigation("SampleResultDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPIS.Models.AnalysisWater", b =>
                {
                    b.HasOne("FPIS.Models.AnalysisItem", "AnalysisItem")
                        .WithMany("AnalysisWaters")
                        .HasForeignKey("AnalysisItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPIS.Models.Water", "Water")
                        .WithMany("AnalysisWaters")
                        .HasForeignKey("WaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalysisItem");

                    b.Navigation("Water");
                });

            modelBuilder.Entity("FPIS.Models.Designation", b =>
                {
                    b.HasOne("FPIS.Models.Department", "Department")
                        .WithMany("Designations")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("FPIS.Models.FinishedProduct", b =>
                {
                    b.HasOne("FPIS.Models.SampleResult", "SampleResult")
                        .WithMany("FinishedProducts")
                        .HasForeignKey("SampleResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SampleResult");
                });

            modelBuilder.Entity("FPIS.Models.IssuedStock", b =>
                {
                    b.HasOne("FPIS.Models.StockItem", "StockItem")
                        .WithMany("IssuedStocks")
                        .HasForeignKey("StockItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPIS.Models.User", "User")
                        .WithMany("IssuedStocks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPIS.Models.MaterialProcurement", b =>
                {
                    b.HasOne("FPIS.Models.Product", "Product")
                        .WithMany("MaterialProcurements")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPIS.Models.User", "User")
                        .WithMany("MaterialProcurements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPIS.Models.ProcurementAttribute", b =>
                {
                    b.HasOne("FPIS.Models.MaterialAttribute", "MaterialAttribute")
                        .WithMany("ProcurementAttributes")
                        .HasForeignKey("MaterialAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPIS.Models.MaterialProcurement", "MaterialProcurement")
                        .WithMany("ProcurementAttributes")
                        .HasForeignKey("ProcurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialAttribute");

                    b.Navigation("MaterialProcurement");
                });

            modelBuilder.Entity("FPIS.Models.ProcurementParameter", b =>
                {
                    b.HasOne("FPIS.Models.MaterialProcurement", "MaterialProcurement")
                        .WithMany("ProcurementParameters")
                        .HasForeignKey("ProcurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPIS.Models.ProductParameter", "ProductParameter")
                        .WithMany("ProcurementParameters")
                        .HasForeignKey("ProductParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialProcurement");

                    b.Navigation("ProductParameter");
                });

            modelBuilder.Entity("FPIS.Models.ProductAnalysisParameter", b =>
                {
                    b.HasOne("FPIS.Models.AnalysisParameter", "AnalysisParameter")
                        .WithMany("ProductAnalysisParameters")
                        .HasForeignKey("AnalysisParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPIS.Models.ProductParameter", "ProductParameter")
                        .WithMany("ProductAnalysisParameters")
                        .HasForeignKey("ProductParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalysisParameter");

                    b.Navigation("ProductParameter");
                });

            modelBuilder.Entity("FPIS.Models.ProductParameter", b =>
                {
                    b.HasOne("FPIS.Models.Product", "Product")
                        .WithMany("ProductParameters")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FPIS.Models.ProductionDailyReport", b =>
                {
                    b.HasOne("FPIS.Models.User", "User")
                        .WithMany("ProductionDailyReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPIS.Models.ReceivedStock", b =>
                {
                    b.HasOne("FPIS.Models.StockItem", "StockItem")
                        .WithMany("ReceivedStocks")
                        .HasForeignKey("StockItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPIS.Models.User", "User")
                        .WithMany("ReceivedStocks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPIS.Models.Receiving", b =>
                {
                    b.HasOne("FPIS.Models.MaterialProcurement", "MaterialProcurement")
                        .WithMany("Receivings")
                        .HasForeignKey("MaterialProcurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialProcurement");
                });

            modelBuilder.Entity("FPIS.Models.Releasing", b =>
                {
                    b.HasOne("FPIS.Models.MaterialProcurement", "MaterialProcurement")
                        .WithMany("Releasings")
                        .HasForeignKey("MaterialProcurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPIS.Models.Receiving", "Receiving")
                        .WithMany("Releasings")
                        .HasForeignKey("ReceivingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialProcurement");

                    b.Navigation("Receiving");
                });

            modelBuilder.Entity("FPIS.Models.Sample", b =>
                {
                    b.HasOne("FPIS.Models.User", "User")
                        .WithMany("Samples")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPIS.Models.SampleDetail", b =>
                {
                    b.HasOne("FPIS.Models.AnalysisItem", "AnalysisItem")
                        .WithMany("SampleDetails")
                        .HasForeignKey("AnalysisItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPIS.Models.Sample", "Sample")
                        .WithMany("SampleDetails")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalysisItem");

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("FPIS.Models.SampleResult", b =>
                {
                    b.HasOne("FPIS.Models.Sample", "Sample")
                        .WithMany("SampleResults")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPIS.Models.User", "User")
                        .WithMany("SampleResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sample");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPIS.Models.SampleResultDetail", b =>
                {
                    b.HasOne("FPIS.Models.AnalysisItem", "AnalysisItem")
                        .WithMany()
                        .HasForeignKey("AnalysisItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPIS.Models.SampleResult", "SampleResult")
                        .WithMany("SampleResultDetails")
                        .HasForeignKey("SampleResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalysisItem");

                    b.Navigation("SampleResult");
                });

            modelBuilder.Entity("FPIS.Models.SampleResultsDetailsWithParameter", b =>
                {
                    b.HasOne("FPIS.Models.AnalysisParameter", "AnalysisParameter")
                        .WithMany("sampleResultsDetailsWithParameters")
                        .HasForeignKey("AnalysisParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPIS.Models.SampleResultDetail", "SampleResultDetail")
                        .WithMany("sampleResultsDetailsWithParameters")
                        .HasForeignKey("SampleResultDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalysisParameter");

                    b.Navigation("SampleResultDetail");
                });

            modelBuilder.Entity("FPIS.Models.User", b =>
                {
                    b.HasOne("FPIS.Models.Designation", "Designation")
                        .WithMany("Users")
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Designation");
                });

            modelBuilder.Entity("FPIS.Models.WaterAnalysisParameter", b =>
                {
                    b.HasOne("FPIS.Models.AnalysisParameter", "AnalysisParameter")
                        .WithMany("WaterAnalysisParameters")
                        .HasForeignKey("AnalysisParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPIS.Models.WaterParameter", "WaterParameter")
                        .WithMany("WaterAnalysisParameters")
                        .HasForeignKey("WaterParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalysisParameter");

                    b.Navigation("WaterParameter");
                });

            modelBuilder.Entity("FPIS.Models.WaterParameter", b =>
                {
                    b.HasOne("FPIS.Models.Water", "Water")
                        .WithMany("WaterParameters")
                        .HasForeignKey("WaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Water");
                });

            modelBuilder.Entity("FPIS.Models.AnalysisItem", b =>
                {
                    b.Navigation("AnalysisProducts");

                    b.Navigation("AnalysisWaters");

                    b.Navigation("SampleDetails");
                });

            modelBuilder.Entity("FPIS.Models.AnalysisParameter", b =>
                {
                    b.Navigation("ProductAnalysisParameters");

                    b.Navigation("WaterAnalysisParameters");

                    b.Navigation("sampleResultsDetailsWithParameters");
                });

            modelBuilder.Entity("FPIS.Models.Department", b =>
                {
                    b.Navigation("Designations");
                });

            modelBuilder.Entity("FPIS.Models.Designation", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FPIS.Models.MaterialAttribute", b =>
                {
                    b.Navigation("ProcurementAttributes");
                });

            modelBuilder.Entity("FPIS.Models.MaterialProcurement", b =>
                {
                    b.Navigation("ProcurementAttributes");

                    b.Navigation("ProcurementParameters");

                    b.Navigation("Receivings");

                    b.Navigation("Releasings");
                });

            modelBuilder.Entity("FPIS.Models.Product", b =>
                {
                    b.Navigation("AnalysisProducts");

                    b.Navigation("MaterialProcurements");

                    b.Navigation("ProductParameters");
                });

            modelBuilder.Entity("FPIS.Models.ProductParameter", b =>
                {
                    b.Navigation("ProcurementParameters");

                    b.Navigation("ProductAnalysisParameters");
                });

            modelBuilder.Entity("FPIS.Models.Receiving", b =>
                {
                    b.Navigation("Releasings");
                });

            modelBuilder.Entity("FPIS.Models.Sample", b =>
                {
                    b.Navigation("SampleDetails");

                    b.Navigation("SampleResults");
                });

            modelBuilder.Entity("FPIS.Models.SampleDetail", b =>
                {
                    b.Navigation("AnalysisRemarks");
                });

            modelBuilder.Entity("FPIS.Models.SampleResult", b =>
                {
                    b.Navigation("FinishedProducts");

                    b.Navigation("SampleResultDetails");
                });

            modelBuilder.Entity("FPIS.Models.SampleResultDetail", b =>
                {
                    b.Navigation("AnalysisRemarks");

                    b.Navigation("sampleResultsDetailsWithParameters");
                });

            modelBuilder.Entity("FPIS.Models.StockItem", b =>
                {
                    b.Navigation("IssuedStocks");

                    b.Navigation("ReceivedStocks");
                });

            modelBuilder.Entity("FPIS.Models.User", b =>
                {
                    b.Navigation("AnalysisRemarks");

                    b.Navigation("IssuedStocks");

                    b.Navigation("MaterialProcurements");

                    b.Navigation("ProductionDailyReports");

                    b.Navigation("ReceivedStocks");

                    b.Navigation("SampleResults");

                    b.Navigation("Samples");
                });

            modelBuilder.Entity("FPIS.Models.Water", b =>
                {
                    b.Navigation("AnalysisWaters");

                    b.Navigation("WaterParameters");
                });

            modelBuilder.Entity("FPIS.Models.WaterParameter", b =>
                {
                    b.Navigation("WaterAnalysisParameters");
                });
#pragma warning restore 612, 618
        }
    }
}
